.Loading {
  box-sizing: border-box;
  width: 100%;
  height: 100vh;
  background: #222;
  /* 实现子元素的垂直水平居中，采用Flex布局 */
  display: flex;
  align-items: center;
  justify-content: center;

  .point{
    width: 2em;
    height: 2em;
    border-radius: 50%; /* 实现圆形 */
    background: #fff;
    margin: 1em;
    user-select: none;//无法被选中
    position: relative;//生成相对定位的元素，相对于其正常位置进行定位。
  }

  //before 选择器向选定的元素前插入内容。
  .point::before{
      position: absolute;//绝对定位，相对于 static 定位以外的第一个父元素进行定位
      content: '';
      width: 100%;
      height: 100%;
      background: inherit;/* 从父元素继承背景颜色 */
      border-radius: inherit;/* 从父元素继承圆角 */

      /* 对before元素定义动画，完成时间2s, 采用ease-out过渡，重复循环 */
      animation-name: wave;
      animation-duration: 2.2s;
      animation-timing-function: ease-out;
      animation-iteration-count: infinite;
  }

  /* 设置背景颜色,自行选取五个颜色即可 */
  .point:nth-child(1) {
    background: #7ef9ff;
  }
  .point:nth-child(2) {
    background: #89cff0;
  }
  .point:nth-child(3) {
    background: #4682b4;
  }
  .point:nth-child(4) {
    background: #0f52ba;
  }
  .point:nth-child(5) {
    background: #000080;
  }

  /*
    * 现在动画都是同时出现的，而我们需要的是一种逐渐出现的效果
    * 所以需要对每个元素的动画加一个延迟
    * 最后一个与第一个之间的间隔太短
    * 所以需要把整体的动画时间延长一下
    */

    .point:nth-child(1)::before {
      animation-delay: 0s; /* 第一个不需要延迟 */
    }
    .point:nth-child(2)::before {
      animation-delay: 0.2s; /* 依次延迟0.2s */
    }
    .point:nth-child(3)::before {
      animation-delay: 0.4s;
    }
    .point:nth-child(4)::before {
      animation-delay: 0.6s;
    }
    .point:nth-child(5)::before {
      animation-delay: 0.8s;
    }
}

@keyframes wave {
    60% {
      transform: scale(2.5);//变大2.5倍
    }

    100%{
      opacity: 0;//消失
    }
}